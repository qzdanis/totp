#!/usr/bin/env python
bin_name = 'totp';
libs = ['mbedcrypto'];

import os
import pipes
import ninja_syntax

n = ninja_syntax.Writer(open('build.ninja', 'w'), 80)

n.comment('auto-generated build file')
n.comment('generated by ' + os.path.basename(__file__));
n.newline()

n.comment('arguments passed to configure.py for re-running it')
env_keys = set(['CC', 'LD', 'CFLAGS', 'LDFLAGS'])
configure_env = dict((k, os.environ[k]) for k in os.environ if k in env_keys)
if configure_env:
    config_str = ' '.join([k + '=' + pipes.quote(configure_env[k])
        for k in configure_env])
    n.variable('configure_env', config_str + '$ ')
n.newline()

n.comment('directories')
n.variable('builddir', '.')
root = os.path.dirname(os.path.realpath(__file__))
if root == os.getcwd():
    root = '.'
n.variable('root', root)
n.newline()

n.comment('build tools')
n.variable('cc', configure_env.get('CC', 'clang'))
n.variable('ld', configure_env.get('LD', 'clang'))
n.newline()

include = 'include'
if root != '.':
    include = os.path.join(root, include)
cflags = ['-I' + include, '-O']
ldflags = ['-l' + lib for lib in libs];

if 'CFLAGS' in configure_env:
    cflags.append(configure_env['CFLAGS'])
n.variable('cflags', cflags)
if 'LDFLAGS' in configure_env:
    ldflags.append(configure_env['LDFLAGS'])
n.variable('ldflags', ldflags)
n.newline()

n.rule('cc', command='$cc $cflags -MMD -MF $out.d -c -o $out $in',
        description='CC $out', deps='gcc', depfile='$out.d')
n.newline()

n.rule('ld', command='$ld $ldflags -o $out $in', description='LINK $out')
n.newline()

intermediates = os.path.join('$builddir', 'intermediates')
src = 'src'
if root != '.':
    src = os.path.join(root, src)

objs = list()
for root, dirs, files in os.walk(src, topdown=True):
    for f in files:
        rel_dir = os.path.relpath(root, src);
        if rel_dir == '.':
            rel_dir = ''
        filename, ext = os.path.splitext(f)

        if ext == '.c':
            n.build(os.path.join(intermediates, rel_dir, filename + '.o'),
                    'cc', inputs=os.path.join(root, f))
            objs.append(os.path.join(intermediates, rel_dir, filename + '.o'))

n.newline()

exe = os.path.join('$builddir', bin_name)
n.build(exe, 'ld', inputs=objs)
n.newline()

n.rule('configure', '${configure_env}Python $root/configure.py', generator=True)
n.build('build.ninja', 'configure', implicit=['$root/configure.py', '$root/ninja_syntax.py'])
